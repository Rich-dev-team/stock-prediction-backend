// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: stockPrice.sql

package db

import (
	"context"
)

const createStockPrice = `-- name: CreateStockPrice :one
INSERT INTO stock_price(company_id, price)
VALUES($1, $2)
RETURNING id, company_id, price, created_at
`

type CreateStockPriceParams struct {
	CompanyID int64 `json:"company_id"`
	Price     int32 `json:"price"`
}

func (q *Queries) CreateStockPrice(ctx context.Context, arg CreateStockPriceParams) (StockPrice, error) {
	row := q.db.QueryRowContext(ctx, createStockPrice, arg.CompanyID, arg.Price)
	var i StockPrice
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const listAllStockPrice = `-- name: ListAllStockPrice :many
SELECT id, company_id, price, created_at
FROM stock_price
where company_id = $1
ORDER BY cur_date
LIMIT $2 OFFSET $3
`

type ListAllStockPriceParams struct {
	CompanyID int64 `json:"company_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListAllStockPrice(ctx context.Context, arg ListAllStockPriceParams) ([]StockPrice, error) {
	rows, err := q.db.QueryContext(ctx, listAllStockPrice, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StockPrice
	for rows.Next() {
		var i StockPrice
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStockPriceByRange = `-- name: ListStockPriceByRange :many
SELECT id, company_id, price, created_at
FROM stock_price
WHERE company_id = $1 BETWEEN $2 AND $3
ORDER BY cur_date
LIMIT $4
`

type ListStockPriceByRangeParams struct {
	Column1 interface{} `json:"column_1"`
	Column2 interface{} `json:"column_2"`
	Column3 interface{} `json:"column_3"`
	Limit   int32       `json:"limit"`
}

func (q *Queries) ListStockPriceByRange(ctx context.Context, arg ListStockPriceByRangeParams) ([]StockPrice, error) {
	rows, err := q.db.QueryContext(ctx, listStockPriceByRange,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StockPrice
	for rows.Next() {
		var i StockPrice
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
