// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: stockPrice.sql

package db

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createBatchStockPrice = `-- name: CreateBatchStockPrice :many
INSERT INTO stock_price(company_id, price, created_at)
VALUES (
        UNNEST ($1::bigint []),
        UNNEST ($2::int []),
        UNNEST ($3::timestamptz [])
    )
RETURNING id, company_id, price, created_at
`

type CreateBatchStockPriceParams struct {
	CompanysID []int64     `json:"companys_id"`
	Prices     []int32     `json:"prices"`
	CreatedAts []time.Time `json:"created_ats"`
}

func (q *Queries) CreateBatchStockPrice(ctx context.Context, arg CreateBatchStockPriceParams) ([]StockPrice, error) {
	rows, err := q.db.QueryContext(ctx, createBatchStockPrice, pq.Array(arg.CompanysID), pq.Array(arg.Prices), pq.Array(arg.CreatedAts))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StockPrice
	for rows.Next() {
		var i StockPrice
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createStockPrice = `-- name: CreateStockPrice :one
INSERT INTO stock_price(company_id, price, created_at)
VALUES($1, $2, $3)
RETURNING id, company_id, price, created_at
`

type CreateStockPriceParams struct {
	CompanyID int64     `json:"company_id"`
	Price     int32     `json:"price"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateStockPrice(ctx context.Context, arg CreateStockPriceParams) (StockPrice, error) {
	row := q.db.QueryRowContext(ctx, createStockPrice, arg.CompanyID, arg.Price, arg.CreatedAt)
	var i StockPrice
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStockPrice = `-- name: DeleteStockPrice :exec
DELETE FROM stock_price
WHERE id = $1
`

func (q *Queries) DeleteStockPrice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStockPrice, id)
	return err
}

const listAllStockPrice = `-- name: ListAllStockPrice :many
SELECT id, company_id, price, created_at
FROM stock_price
where company_id = $1
ORDER BY created_at
LIMIT $2 OFFSET $3
`

type ListAllStockPriceParams struct {
	CompanyID int64 `json:"company_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListAllStockPrice(ctx context.Context, arg ListAllStockPriceParams) ([]StockPrice, error) {
	rows, err := q.db.QueryContext(ctx, listAllStockPrice, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StockPrice
	for rows.Next() {
		var i StockPrice
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStockPriceByRange = `-- name: ListStockPriceByRange :many
SELECT id, company_id, price, created_at
FROM stock_price
WHERE company_id = $1
    AND created_at BETWEEN $3 AND $4
ORDER BY created_at
LIMIT $2
`

type ListStockPriceByRangeParams struct {
	CompanyID int64     `json:"company_id"`
	Limit     int32     `json:"limit"`
	Starttime time.Time `json:"starttime"`
	Endtime   time.Time `json:"endtime"`
}

func (q *Queries) ListStockPriceByRange(ctx context.Context, arg ListStockPriceByRangeParams) ([]StockPrice, error) {
	rows, err := q.db.QueryContext(ctx, listStockPriceByRange,
		arg.CompanyID,
		arg.Limit,
		arg.Starttime,
		arg.Endtime,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StockPrice
	for rows.Next() {
		var i StockPrice
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStockPriceByRangeForUpdate = `-- name: ListStockPriceByRangeForUpdate :many
SELECT id, company_id, price, created_at
FROM stock_price
WHERE company_id = $1
    AND created_at BETWEEN $3 AND $4
ORDER BY created_at
LIMIT $2
For NO KEY UPDATE
`

type ListStockPriceByRangeForUpdateParams struct {
	CompanyID int64     `json:"company_id"`
	Limit     int32     `json:"limit"`
	Starttime time.Time `json:"starttime"`
	Endtime   time.Time `json:"endtime"`
}

func (q *Queries) ListStockPriceByRangeForUpdate(ctx context.Context, arg ListStockPriceByRangeForUpdateParams) ([]StockPrice, error) {
	rows, err := q.db.QueryContext(ctx, listStockPriceByRangeForUpdate,
		arg.CompanyID,
		arg.Limit,
		arg.Starttime,
		arg.Endtime,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StockPrice
	for rows.Next() {
		var i StockPrice
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStockPrice = `-- name: UpdateStockPrice :one
UPDATE stock_price
SET price = $2
where id = $1
RETURNING id, company_id, price, created_at
`

type UpdateStockPriceParams struct {
	ID    int64 `json:"id"`
	Price int32 `json:"price"`
}

func (q *Queries) UpdateStockPrice(ctx context.Context, arg UpdateStockPriceParams) (StockPrice, error) {
	row := q.db.QueryRowContext(ctx, updateStockPrice, arg.ID, arg.Price)
	var i StockPrice
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}
